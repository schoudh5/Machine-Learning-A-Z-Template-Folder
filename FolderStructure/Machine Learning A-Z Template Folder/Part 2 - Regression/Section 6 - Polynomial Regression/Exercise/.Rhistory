print("Hello world")
print("Hello world")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
dataset = read.csv('Salary_Data.csv')
setwd("~/Documents/MachineLearningCourse/FolderStructure/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Exercise")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
View(test_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(dataset)
View(test_set)
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
color = 'red')+
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colo = 'blue')+
ggtitle('Salary vs Experience(Training set)')+
xlab('Years of Experience')+
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
color = 'red')+
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colo = 'blue')+
ggtitle('Salary vs Experience(Test set)')+
xlab('Years of Experience')+
ylab('Salary')
setwd("~/Documents/MachineLearningCourse/FolderStructure/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/Exercise")
dataset = read.csv('50_Startups.csv')
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
View(training_set)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(dataset)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Building the optimal model using Backward Elimination
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
View(dataset)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
setwd("~/Documents/MachineLearningCourse/FolderStructure/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/Exercise")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
dataset = dataset[2:3]
View(dataset)
summary(lin_reg)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
View(dataset)
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
poly_reg
summary(poly_reg)
library(ggplot2)
ggplot()
+geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')
+geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue')
+ggtitle('Truth or Bluff(Linear Regression)')
+xlab('Level')
+ylab('Salary')
lin_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot()
+geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')
+geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue')
+ggtitle('Truth or Bluff(Linear Regression)')
+xlab('Level')
+ylab('Salary')
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# fitting linear regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# fitting polynomial regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualizing the Linear Regression results
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue')+
ggtitle('Truth or Bluff(Linear Regression)')+
xlab('Level')+
ylab('Salary')
View(dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue')+
ggtitle('Truth or Bluff(Polynomial Regression)')+
xlab('Level')+
ylab('Salary')
dataset$Level4 = dataset$Level^4
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue')+
ggtitle('Truth or Bluff(Polynomial Regression)')+
xlab('Level')+
ylab('Salary')
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue')+
ggtitle('Truth or Bluff(Polynomial Regression)')+
xlab('Level')+
ylab('Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
data.frame(Level = 6.5)
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
View(regressor)
y_pred = predict(lin_reg, data.frame(Level = 6.5))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# fitting linear regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# fitting polynomial regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualizing the Linear Regression results
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), color = 'blue')+
ggtitle('Truth or Bluff(Linear Regression)')+
xlab('Level')+
ylab('Salary')
# Visualizing the polynomial regression results
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), color = 'blue')+
ggtitle('Truth or Bluff(Polynomial Regression)')+
xlab('Level')+
ylab('Salary')
# predicting a new result with linear regression
y_pred = predict(lin_reg, data.frame(Level = 6.5))
# predicting a new result with Polynomial regression
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.4^4))
summary(y_pred)
y_pred = predict(lin_reg, data.frame(Level = 6.5))
